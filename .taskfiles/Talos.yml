---
version: "3"

vars:
  DOMAIN: "kubernetes.internal"
  # renovate: datasource=github-releases depName=ishioni/talos-images
  TALOS_VERSION: "v1.5.3"
  # renovate: datasource=github-releases depName=budimanjojo/talhelper
  TALHELPER_VERSION: "v1.12.0"
  # renovate: datasource=github-releases depName=siderolabs/kubelet
  KUBERNETES_VERSION: "v1.28.2"

tasks:
  generate:
    internal: true
    desc: Generate Talos machine configurations (task talos:generate)
    dir: infrastructure/talos
    cmds:
      - talhelper genconfig
    sources:
      - talconfig.yaml
      - talenv.sops.yaml
      - talenv.yaml
      - talsecret.sops.yaml
    generates:
      - clusterconfig/*.yaml
      - clusterconfig/talosconfig

  wait_for_health:
    internal: true
    desc: Wait for services in cluster to be healthy
    cmds:
      # Ensure CloudNative-PG cluster has 3 ready instances
      - kubectl -n database wait --for jsonpath='{.status.readyInstances}'='3' --timeout {{ .TIMEOUT | default "30s" }} cluster postgres

  apply-insecure:
    internal: true
    desc: Apply Talos config to a node in maintenance mode
    dir: infrastructure/talos
    cmds:
      - task: generate
      - talosctl apply-config -i -n {{ .IP }} -f clusterconfig/talos-{{ .NODE }}.{{ .DOMAIN }}.yaml

  upgrade:
    internal: true
    desc: Upgrade a single node to Talos version {{ .TALOS_VERSION }} (task talos:upgrade NODE=master-0)
    dir: infrastructure/talos
    status:
      - talosctl version -n {{ .NODE }}.{{ .DOMAIN }} --short | grep 'Tag.*{{ .TALOS_VERSION }}'
    cmds:
      - task: wait_for_health
        vars: {TIMEOUT: 10m}
      - task: apply
        vars: {NODE: "{{ .NODE }}", CLI_ARGS: "-m no-reboot"}
      - talosctl upgrade -n {{ .NODE }}.{{ .DOMAIN }} --image ghcr.io/ishioni/installer:{{ .TALOS_VERSION }}

  init:
    desc: Init talosctl and grab kubeconfig (task talos:init)
    cmds:
      - task: generate
      - talosctl config merge infrastructure/talos/clusterconfig/talosconfig
      - talosctl --talosconfig=infrastructure/talos/clusterconfig/talosconfig kubeconfig -n master-0.{{ .DOMAIN }} $KUBECONFIG

  deploy-extras:
    internal: true
    desc: Deploy extras
    dir: infrastructure/talos
    cmds:
      - ./deploy-extras.sh

  install:
    desc: Install talos on uninitialized machines
    dir: infrastructure/talos
    cmds:
      - task: generate
      - task: apply-insecure
        vars: {IP: "10.1.4.10", NODE: "master-0"}
      - task: apply-insecure
        vars: {IP: "10.1.4.11", NODE: "master-1"}
      - task: apply-insecure
        vars: {IP: "10.1.4.12", NODE: "master-2"}
      - task: apply-insecure
        vars: {IP: "10.1.4.20", NODE: "worker-0"}
      - task: apply-insecure
        vars: {IP: "10.1.4.21", NODE: "worker-1"}
      - task: apply-insecure
        vars: {IP: "10.1.4.22", NODE: "worker-2"}
      - echo "Wait for install"
      - sleep 180
      - echo "Bootstrapping etcd"
      - talosctl bootstrap -n master-0.{{ .DOMAIN }}
      - sleep 180
      - task: init
      - kubectl certificate approve $(kubectl get csr --sort-by=.metadata.creationTimestamp | grep Pending | awk '{print $1}')
      - task: deploy-extras

  apply:
    desc: Apply Talos config to a specific node (task talos:apply NODE=k8s-control01)
    dir: infrastructure/talos
    cmds:
      - task: generate
      - talosctl apply-config -n {{ .NODE }}.{{ .DOMAIN }} -f clusterconfig/talos-{{ .NODE }}.{{ .DOMAIN }}.yaml {{ .CLI_ARGS }}

  apply:all:
    desc: Apply Talos config to all nodes
    dir: infrastructure/talos
    cmds:
      - task: generate
      - task: apply
        vars: {NODE: master-0}
      - task: apply
        vars: {NODE: master-1}
      - task: apply
        vars: {NODE: master-2}
      - task: apply
        vars: {NODE: worker-0}
      - task: apply
        vars: {NODE: worker-1}
      - task: apply
        vars: {NODE: worker-2}

  upgrade:all:
    desc: Upgrade all nodes to Talos version {{ .TALOS_VERSION }} (task talos:upgrade:all)
    dir: infrastructure/talos
    cmds:
      - task: generate
      # control-plane
      - task: upgrade
        vars: {NODE: master-0}
      - task: upgrade
        vars: {NODE: master-1}
      - task: upgrade
        vars: {NODE: master-2}
      # workers
      - task: upgrade
        vars: {NODE: worker-0}
      - task: upgrade
        vars: {NODE: worker-1}
      - task: upgrade
        vars: {NODE: worker-2}

  upgrade:k8s:
    dir: infrastructure/talos
    desc: Upgrade Kubernetes to {{ .KUBERNETES_VERSION }} (task talos:upgrade:k8s NODE=talos-master-0)
    cmds:
      - task: generate
      - talosctl -n {{ .NODE }}.{{ .DOMAIN }} upgrade-k8s --to {{ .KUBERNETES_VERSION }}

  dashboard:
    desc: Show talos dashboard for node (task talos:dashboard NODE=master-0)
    cmds:
      - task: generate
      - talosctl --talosconfig=infrastructure/talos/clusterconfig/talosconfig -n {{ .NODE }}.{{ .DOMAIN }} dashboard
