---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitor
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 49.0.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    crds:
      enabled: true
    fullnameOverride: prometheus
    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: true
        configReloaders: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverSlos: true
        kubelet: true
        kubeProxy: false
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: false
        kubeStateMetrics: true
        network: true
        node: true
        nodeExporterAlerting: true
        nodeExporterRecording: true
        prometheus: true
        prometheusOperator: true
    kubeControllerManager:
      enabled: true
      endpoints: &cp ["10.1.4.20", "10.1.4.21", "10.1.4.22"]
    kubeEtcd:
      enabled: true
      endpoints: *cp
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
      endpoints: *cp
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: true
      endpoints: *cp
    kubeStateMetrics:
      enabled: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    alertmanager:
      ingress:
        enabled: true
        ingressClassName: private
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/appName: Alert Manager
          hajimari.io/icon: mdi:alert-decagram-outline
          hajimari.io/group: infrastructure
        hosts:
          - &host "alerts.internal.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - *host
            secretName: *host
      alertmanagerSpec:
        useExistingSecret: true
        configSecret: alertmanager-secret
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: truenas-ssd-nvmeof
              resources:
                requests:
                  storage: 1Gi
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: false
    prometheus:
      ingress:
        enabled: true
        ingressClassName: private
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/appName: Prometheus
          hajimari.io/icon: simple-icons:prometheus
          hajimari.io/group: infrastructure
        pathType: Prefix
        hosts:
          - &host prometheus.internal.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *host
            secretName: *host
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "__replica__"
        scrapeInterval: 1m
        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enabledFeatures:
          - auto-gomaxprocs
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        retention: 2d
        retentionSize: 6GB
        ruleSelector: {}
        ruleNamespaceSelector: {}
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: truenas-ssd-nvmeof
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.32.0
          objectStorageConfig:
            name: thanos-objectstore-secret
            key: minio.yaml
