---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: radarr
spec:
  chart:
    spec:
      chart: app-template
      version: 3.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  interval: 30m
  dependsOn:
    - name: prowlarr
    - name: qbittorrent
  values:
    controllers:
      radarr:
        type: statefulset
        annotations:
          secret.reloader.stakater.com/reload: &secret radarr-secret
        initContainers:
          01-init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16.6
              pullPolicy: IfNotPresent
            envFrom:
              - secretRef:
                  name: *secret
        pod:
          securityContext:
            runAsNonRoot: true
            runAsUser: 568
            runAsGroup: 5000
            fsGroup: 5000
            fsGroupChangePolicy: OnRootMismatch
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/radarr
              tag: 5.16.3.9541
            env:
              RADARR__APP__INSTANCENAME: ${APP}
              RADARR__APP__THEME: dark
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              RADARR__LOG__DBENABLED: "False"
              RADARR__LOG__LEVEL: info
              RADARR__SERVER__PORT: &port 80
              TZ: ${CONFIG_TIMEZONE}
            envFrom:
              - secretRef:
                  name: *secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: {drop: ["ALL"]}
            resources:
              requests:
                cpu: 50m
                memory: 200Mi
              limits:
                memory: 500Mi
    service:
      app:
        controller: radarr
        ports:
          http:
            port: *port
    ingress:
      app:
        className: public
        annotations:
          authentik.home.arpa/enabled: "true"
          nginx.ingress.kubernetes.io/auth-signin: |-
            https://${HOSTNAME}/outpost.goauthentik.io/start?rd=$escaped_request_uri
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Downloads
          gethomepage.dev/name: Radarr
          gethomepage.dev/icon: radarr.svg
          gethomepage.dev/widget.type: radarr
          gethomepage.dev/widget.url: http://radarr.downloads
          gethomepage.dev/widget.key: "{{`{{HOMEPAGE_VAR_RADARR_TOKEN}}`}}"
        hosts:
          - host: ${HOSTNAME}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        existingClaim: ${PVC_CLAIM}
      logs:
        type: emptyDir
        globalMounts:
          - path: /config/logs
      media:
        existingClaim: downloads-datastore
        globalMounts:
          - path: /media
      tmp:
        type: emptyDir
