---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: grafana
spec:
  chart:
    spec:
      chart: grafana
      version: 8.6.1
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  interval: 30m
  values:
    annotations:
      secret.reloader.stakater.com/reload: &secret grafana-secret
    extraInitContainers:
      - name: init-db
        image: ghcr.io/onedr0p/postgres-init:16.6
        envFrom:
          - secretRef:
              name: *secret
    rbac:
      pspEnabled: false
    persistence:
      enabled: false
    testFramework:
      enabled: false
    imageRenderer:
      enabled: false
    serviceMonitor:
      enabled: true
    serviceAccount:
      autoMount: true
    ingress:
      enabled: true
      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Infrastructure
        gethomepage.dev/name: Grafana
        gethomepage.dev/icon: grafana.svg
      ingressClassName: private
      hosts:
        - &host ${HOSTNAME}
      tls: [hosts: [*host]]
    env:
      GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: true
    envFromSecrets:
      - name: *secret
    grafana.ini:
      analytics:
        check_for_updates: false
        check_for_plugin_updates: false
        reporting_enabled: false
      auth:
        oauth_auto_login: true
        signout_redirect_url: https://${AUTH_HOSTNAME}/application/o/grafana/end-session/
        oauth_allow_insecure_email_lookup: true
      auth.basic:
        enabled: false
      auth.anonymous:
        enabled: false
        # org_id: 1
        # org_role: Viewer
      auth.generic_oauth:
        enabled: true
        name: ${PUBLIC_DOMAIN}
        icon: signin
        auth_url: https://${AUTH_HOSTNAME}/application/o/authorize/
        token_url: https://${AUTH_HOSTNAME}/application/o/token/
        api_url: https://${AUTH_HOSTNAME}/application/o/userinfo/
        scopes: openid email profile
        use_pkce: true
        skip_org_role_sync: true
      auth.generic_oauth.group_mapping:
        role_attribute_path: |
          contains(groups[*], 'infrastructure') && 'Admin' || 'Viewer'
        org_id: 1
      log:
        mode: console
      news:
        news_feed_enabled: false
      paths:
        data: /var/lib/grafana/data
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      server:
        root_url: https://${HOSTNAME}
    plugins:
      - pr0ps-trackmap-panel
      - grafana-clock-panel
      - grafana-piechart-panel
      - grafana-worldmap-panel
      - natel-discrete-panel
      - natel-plotly-panel
      - vonage-status-panel
      - https://github.com/panodata/panodata-map-panel/releases/download/0.16.0/panodata-map-panel-0.16.0.zip;grafana-worldmap-panel-ng
      - redis-datasource
    sidecar:
      datasources:
        enabled: true
        searchNamespace: ALL
        initDatasources: true
        labelValue: ""
      dashboards:
        enabled: true
        labelValue: ""
        label: grafana_dashboard
        folderAnnotation: grafana_folder
        searchNamespace: ALL
        provider:
          disableDelete: true
          foldersFromFilesStructure: true
    datasources:
      datasources.yaml:
        apiVersion: 1
        # list of datasources that should be deleted from the database
        deleteDatasources:
          - name: Loki
            orgId: 1
          - name: Alertmanager
            orgId: 1
        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://thanos-query.monitor.svc.cluster.local:10902/
            isDefault: true
            jsonData:
              timeInterval: 30s
          - name: Alertmanager
            type: alertmanager
            access: proxy
            url: http://alertmanager.monitor.svc.cluster.local:9093
            jsonData:
              implementation: prometheus
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: "default"
            disableDeletion: false
            editable: true
            folder: ""
            options:
              path: /var/lib/grafana/dashboards/default
            orgId: 1
            type: file
          - name: "storage"
            disableDeletion: false
            editable: true
            folder: "Storage"
            options:
              path: /var/lib/grafana/dashboards/database
            orgId: 1
            type: file
          - name: "kubernetes"
            orgId: 1
            folder: "Kubernetes"
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/kubernetes
          - name: "networking"
            org_id: 1
            folder: "Networking"
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/networking
          - name: "system"
            orgId: 1
            folder: "System"
            type: file
            disableDeletion: false
            editable: true
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/system
    dashboards:
      kubernetes:
        flux-cluster:
          url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/cluster.json
          datasource: Prometheus
        flux-control-plane:
          url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/control-plane.json
          datasource: Prometheus
        api-server:
          # renovate: depName="Kubernetes / System / API Server"
          gnetId: 15761
          revision: 18
          datasource: Prometheus
        coredns:
          # renovate: depName="Kubernetes / System / CoreDNS"
          gnetId: 15762
          revision: 18
          datasource: Prometheus
        global:
          # renovate: depName="Kubernetes / Views / Global"
          gnetId: 15757
          revision: 42
          datasource: Prometheus
        namespaces:
          # renovate: depName="Kubernetes / Views / Namespaces"
          gnetId: 15758
          revision: 40
          datasource: Prometheus
        nodes:
          # renovate: depName="Kubernetes / Views / Nodes"
          gnetId: 15759
          revision: 32
          datasource: Prometheus
        pods:
          # renovate: depName="Kubernetes / Views / Pods"
          gnetId: 15760
          revision: 32
          datasource: Prometheus
        volumes:
          # renovate: depName="K8s / Storage / Volumes / Cluster"
          gnetId: 11454
          revision: 14
          datasource: Prometheus
        nfd:
          url: https://raw.githubusercontent.com/kubernetes-sigs/node-feature-discovery/master/examples/grafana-dashboard.json
          datasource: Prometheus
        spegel:
          # renovate: depName="Spegel"
          gnetId: 18089
          revision: 1
          datasource:
            - {name: DS_PROMETHEUS, value: Prometheus}
      networking:
        cert-manager:
          url: https://raw.githubusercontent.com/szinn/k8s-homelab/main/kubernetes/main/apps/cert-manager/cert-manager/app/cert-manager-dashboard.json
          datasource: Prometheus
        ingress-nginx:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
          datasource: Prometheus
        ingress-nginx-request-handling-performance:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/request-handling-performance.json
          datasource: Prometheus
        speedtest-exporter-hub:
          # renovate: depName="Speedtest-Exporter"
          gnetId: 13665
          revision: 4
          datasource:
            - {name: DS_PROMETHEUS, value: Prometheus}
        external-dns:
          # renovate: depName="External-DNS"
          gnetId: 15038
          revision: 3
          datasource: Prometheus
        external-secrets:
          url: https://raw.githubusercontent.com/external-secrets/external-secrets/main/docs/snippets/dashboard.json
          datasource: Prometheus
        unifi-client-dpi:
          # renovate: depName="Unifi Client DPI"
          gnetId: 11310
          revision: 9
          datasource: Prometheus
        unifi-usw-insights:
          # renovate: depName="Unifi USW"
          gnetId: 11312
          revision: 9
          datasource: Prometheus
        unifi-cg-insights:
          # renovate: depName="Unifi CG"
          gnetId: 11313
          revision: 9
          datasource: Prometheus
        unifi-uap-insights:
          # renovate: depName="Unifi UAP"
          gnetId: 11314
          revision: 10
          datasource: Prometheus
        unifi-client-insights:
          # renovate: depName="Unifi Client"
          gnetId: 11315
          revision: 9
          datasource: Prometheus
      storage:
        dragonfly:
          url: https://raw.githubusercontent.com/dragonflydb/dragonfly/main/tools/local/monitoring/grafana/provisioning/dashboards/dashboard.json
          datasource: Prometheus
        minio-dashboard:
          # renovate: depName="Minio"
          gnetId: 13502
          revision: 26
          datasource:
            - {name: DS_PROMETHEUS, value: Prometheus}
        zfs:
          # renovate: depName="ZFS"
          gnetId: 7845
          revision: 4
          datasource: Prometheus
        volsync:
          # renovate: depName="Volsync"
          gnetId: 21356
          revision: 3
          datasource:
            - {name: DS_PROMETHEUS, value: Prometheus}
            - {name: VAR_REPLICATIONDESTNAME, value: ".*-rdst"}
      system:
        node-exporter:
          # renovate: depName="Node Exporter"
          gnetId: 11074
          revision: 9
          datasource: Prometheus
        node-exporter-full:
          # renovate: depName="Node Exporter Full"
          gnetId: 1860
          revision: 37
          datasource: Prometheus
        nut:
          # renovate: depName="NUT"
          gnetId: 15406
          revision: 2
          datasource:
            - {name: DS_GRAFANACLOUD-DENYAGO-PROM, value: Prometheus}
        smart:
          # renovate: depName="Dashboard for smartctl_exporter"
          gnetId: 20204
          revision: 1
          datasource:
            - { name: DS_PROMETHEUS, value: Prometheus }
