---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 65.6.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  interval: 30m
  valuesFrom:
    - kind: ConfigMap
      name: kube-state-metrics-config
      valuesKey: kube-state-metrics.yaml
  values:
    crds:
      enabled: true
    cleanPrometheusOperatorObjectNames: true
    # fullnameOverride: prometheus
    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: true
        configReloaders: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverSlos: true
        kubelet: true
        kubeProxy: false
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: false
        kubeStateMetrics: true
        network: true
        node: true
        nodeExporterAlerting: true
        nodeExporterRecording: true
        prometheus: true
        prometheusOperator: true
    kubeApiServer:
      serviceMonitor:
        selector:
          k8s-app: kube-apiserver
    kubeScheduler:
      service:
        selector:
          k8s-app: kube-scheduler
    kubeControllerManager: &kubeControllerManager
      service:
        selector:
          k8s-app: kube-controller-manager
    kubeEtcd:
      <<: *kubeControllerManager # etcd runs on control plane nodes
    kubeProxy:
      enabled: false
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [__meta_kubernetes_pod_node_name]
              targetLabel: kubernetes_node
    alertmanager:
      ingress:
        enabled: true
        ingressClassName: private
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Infrastructure
          gethomepage.dev/name: Alert Manager
          gethomepage.dev/icon: alertmanager.svg
          gethomepage.dev/pod-selector: app.kubernetes.io/name=alertmanager
        hosts:
          - &host ${ALERT_HOSTNAME}
        tls: [hosts: [*host]]
      alertmanagerSpec:
        useExistingSecret: true
        configSecret: alertmanager-secret
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: truenas-ssd-iscsi
              resources:
                requests:
                  storage: 1Gi
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [__meta_kubernetes_pod_node_name]
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: false
      # sidecar:
      #   dashboards:
      #     annotations:
      #       grafana_folder: Kubernetes
      #     multicluster:
      #       etcd:
      #         enabled: true
    prometheus:
      ingress:
        enabled: true
        ingressClassName: private
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Infrastructure
          gethomepage.dev/name: Prometheus
          gethomepage.dev/icon: prometheus.svg
          gethomepage.dev/pod-selector: app.kubernetes.io/name=prometheus
          gethomepage.dev/widget.type: prometheus
          gethomepage.dev/widget.url: http://kube-prometheus-stack-prometheus.monitor:9090
        pathType: Prefix
        hosts:
          - &host ${HOSTNAME}
        tls: [hosts: [*host]]
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "__replica__"
        scrapeInterval: 30s
        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enabledFeatures:
          - auto-gomaxprocs
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        retention: 2d
        retentionSize: 6GB
        ruleSelector: {}
        ruleNamespaceSelector: {}
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: truenas-ssd-iscsi
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.36.1
          objectStorageConfig:
            existingSecret:
              name: thanos-objectstore-secret
              key: objstore.yml
