---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: partdb
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.6.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    controllers:
      partdb:
        type: statefulset
        annotations:
          secret.reloader.stakater.com/reload: &secret partdb-secret
        initContainers:
          01-init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16.6
              pullPolicy: IfNotPresent
            envFrom:
              - secretRef:
                  name: *secret
        containers:
          app:
            image:
              repository: docker.io/partdborg/part-db
              tag: v1.15.1
            env:
              BASE_CURRENCY: EUR
              DEFAULT_TIMEZONE: ${CONFIG_TIMEZONE}
              SERVER_NAME: ${HOSTNAME}
              TRUSTED_PROXIES: 172.16.0.0/16
              TRUSTED_HOSTS: ${HOSTNAME}
              MERCURE_PUBLIC_URL: https://${HOSTNAME}/.well-known/mercure
            envFrom:
              - secretRef:
                  name: *secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /metrics
                    port: 2019
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            resources:
              requests:
                cpu: 50m
                memory: 200Mi
              limits:
                memory: 500Mi
    service:
      app:
        controller: partdb
        ports:
          http:
            port: 80
    ingress:
      app:
        className: private
        hosts:
          - host: ${HOSTNAME}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        existingClaim: ${VOLSYNC_CLAIM}
        globalMounts:
          - path: /data
            subPath: caddy-data
          - path: /config
            subPath: caddy-config
          - path: /var/www/html/uploads
            subPath: uploads
          - path: /var/www/html/public/media
            subPath: media
      db:
        type: emptyDir
        globalMounts:
          - path: /var/www/html/var/db
